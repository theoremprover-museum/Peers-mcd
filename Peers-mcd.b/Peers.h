/* File of the MODIFIED CLAUSE DIFFUSION distributed prover Peers_mcd */

#ifndef TP_PEERS_H
#define TP_PEERS_H

#define MAX_PROCESSES      20
/* Reduced from 100 to 20: Peers-mcd, November 1996 */

/* Values for the Parameter DECIDE_OWNER_STRAT, which controls the choice */
/* of the strategy to allocate clauses to processes			  */

#define ROTATE			 1	/* default */
/* rotate among processes */
#define SYNTAX			 2
/* based on the clause syntax */
#define SELECT_MIN		 3
/* based on work-load of processes */
#define PARENTS			 4
/* based on ids of para_parents so that all clauses children	*/
/* of same para_parents are assigned to the same process,	*/
/* clauses generated by back-demodulation go to Peer0.		*/
#define HISTORY			 5
/* based on ids of all clauses in the justification */
/* taken as representing the history of the clause */
#define R_PARENTS		 6
/* ROTATE on input clauses, PARENTS on all other clauses */
#define R_HISTORY		 7
/* ROTATE on input clauses, HISTORY on all other clauses */
#define ALL_PARENTS		 8
/* based on ids of para_parents or bd_parent, so that all */
/* clauses children of same parents are assigned to the same process. */
#define R_ALL_PARENTS		 9
/* ROTATE on input clauses, ALL_PARENTS on all other clauses */
#define R_AGO			10
/* ROTATE for as many choices as defined by the value of the parameter 	 */
/* SWITCH_OWNER_STRAT, AGO (Ancestor-Graph Oriented allocation criterion)*/
/* afterwards.								 */

/********* Declaration of global variables for peers_mcd (MDC prover) ********/

/* Clause lists. */

extern struct list *Usable;
extern struct list *Sos;
extern struct list *Demodulators;
extern struct list *Passive;
extern struct list *Disabled;

/* Indexes. */

extern Discrim_ptr Discrim_demod; /* for demodulation */
extern Discrim_ptr Discrim_pos;   /* positive literals for forward subsumption */
extern Discrim_ptr Discrim_neg;   /* negative literals for forward subsumption */

extern Fpa_index_ptr Fpa_terms;   /* for "from" paramodulation */
extern Fpa_index_ptr Fpa_alphas;  /* for "into" paramodulation */
extern Fpa_index_ptr Fpa_bd;      /* for back demodulation */
extern Fpa_index_ptr Fpa_pos;     /* pos literals: back subsump. and unit conflict */
extern Fpa_index_ptr Fpa_neg;     /* neg literals: back subsump. and unit conflict */

extern Pair_index_ptr Para_pairs; /* paramodulation-by-pairs */
extern Pair_index_ptr Para_pairs_breadth; /* paramodulation-by-pairs with ratio */

/* Macros to get the correct index from the literal. */

#define FS_INDEX(lit)  (lit->sign ? Discrim_pos : Discrim_neg)
#define LIT_INDEX(lit) (lit->sign ? Fpa_pos : Fpa_neg)
#define COMP_LIT_INDEX(lit) (lit->sign ? Fpa_neg : Fpa_pos)

/* To access clauses by ID. */

extern Gen_ptr_ptr *Id_table;

/* Interpretation for semantic inference rules. */

extern Interp_ptr Interpretation;

/* Peers_assigned_clauses[i] is the number of clauses that Pid assigned */
/* to i so far. It is used by the naming scheme to determine the third  */
/* component (num) of the id of a clause. 				*/

extern int Peers_assigned_clauses[MAX_PROCESSES];

/* Peers_work_load[i] for i =/= Pid is the number of inference messages */
/* that Pid received from i so far. Peers_work_load[Pid] is the number  */
/* of inference messages that Pid sent so far. Peers_work_load[i] is	*/
/* used as an estimate of the work-load of peer i by decide_owner()	*/
/* with the SELECT_MIN criterion.					*/

extern int Peers_work_load[MAX_PROCESSES];

/* The following variable is used by the termination detection algorithm. */
/* It is incremented whenever a message is sent and decremented whenever a */
/* message is received. The sum of the Msgs_diff at all the peers will be 0 */
/* when all sent messages have been received.				   */

extern int Msgs_diff;

/* The following variable is used by the termination detection algorithm: 1 */
/* if Pid has the token, 0 otherwise.					   */

extern int Have_token;

/* The following variable is used by the termination detection algorithm, */
/* so that Peer0 can detect to have received the token twice.		   */

extern int How_many_times_token_received;

/* The following array is used for building long messages. */

extern char Work_str[MAX_DAC_STRING];

/*************** End global variables for peers_mcd (MCD prover)  ************/

/* function prototypes from peers.c */

void peer_init_and_work();
void peer_work();
int work_available();
int find_high_priority_work();
void work_loop();
int random_by_para_parents();
int random_by_all_parents();
int random_by_history();
int rotation();
int select_min();
int ago();
int decide_owner();
void broadcast_clause();
void check_for_halt_msg();
void process_inference_msg();
int encode_id();
void handle_inference_msg();
int birth_place();
int num();
int owner();
int mine();
int clause_to_peer_function();

#endif  /* ! TP_PEERS_H */


